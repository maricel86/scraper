import { BaseDownloadStrategy } from './downloadStrategy';
import { DownloadResult } from '../types';

/**
 * Strategy for simulating search results as a last resort
 * This is a stub implementation for the "OnlineSearch" strategy mentioned in the flowchart
 */
export class OnlineSearchStrategy extends BaseDownloadStrategy {
  constructor() {
    super('Online Search', 'N/A', 'Search');
  }
  
  isApplicable(url: string, previousError?: Error): boolean {
    // This is the last resort strategy, so it's always applicable if we've reached this point
    return true;
  }
  
  async download(url: string): Promise<DownloadResult> {
    // In a real implementation, this would perform a search using a search engine API
    // and extract relevant information about the website
    
    // For now, we'll return a stub result
    const domainMatch = url.match(/\/\/(?:www\.)?([^\/]+)/i);
    const domain = domainMatch ? domainMatch[1] : url;
    
    // Extract company name safely
    const companyName = domain ? domain.split('.')[0] : 'unknown';
    
    // Generate a stub content
    const content = `
# Stub search results for ${domain || url}

This is a placeholder content generated by OnlineSearchStrategy.
In a real implementation, this would contain information gathered from search engine results.

Some potential information that could be extracted:
- Company name: ${companyName}
- Domain: ${domain || url}
- Description: A website at ${domain || url}
- Last seen: Current date
    `;
    
    const size = Buffer.byteLength(content, 'utf8');
    
    return {
      content,
      effectiveUrl: url,
      size,
      links: [], // Search results don't provide links
      isMarkdown: true
    };
  }
}
